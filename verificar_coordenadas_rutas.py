import json
import os

def verificar_coordenadas_rutas():
    """
    Verifica las coordenadas de las rutas del metro
    """
    print("üîç Verificando coordenadas de rutas...")
    
    # Cargar archivo de rutas
    try:
        with open('static/data/metro_routes.json', 'r', encoding='utf-8') as f:
            routes_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ el archivo metro_routes.json")
        return
    except json.JSONDecodeError as e:
        print(f"‚ùå Error al parsear JSON: {e}")
        return
    
    print(f"‚úÖ Archivo cargado: {len(routes_data.get('lines', []))} l√≠neas")
    
    # Verificar coordenadas de cada l√≠nea
    coordenadas_incorrectas = 0
    total_coordenadas = 0
    
    for linea in routes_data.get('lines', []):
        line_id = linea.get('line', '')
        print(f"\nüìè Verificando L√≠nea {line_id}...")
        
        for i, path in enumerate(linea.get('paths', [])):
            path_incorrecto = False
            
            for j, coord in enumerate(path):
                total_coordenadas += 1
                
                # Verificar si las coordenadas est√°n en formato correcto para Madrid
                if len(coord) == 2:
                    lat, lon = coord[0], coord[1]
                    
                    # Madrid est√° en latitud ~40.4 y longitud ~-3.7
                    # Si la primera coordenada es negativa y la segunda positiva, est√°n invertidas
                    if lat < 0 and lon > 0:
                        # Intercambiar coordenadas
                        path[j] = [lon, lat]
                        path_incorrecto = True
                        coordenadas_incorrectas += 1
                        print(f"  üîÑ Coordenada {j} corregida: [{lat}, {lon}] ‚Üí [{lon}, {lat}]")
            
            if path_incorrecto:
                print(f"  ‚úÖ Path {i} corregido")
    
    print(f"\nüìä RESUMEN:")
    print(f"  ‚Ä¢ Total de coordenadas verificadas: {total_coordenadas}")
    print(f"  ‚Ä¢ Coordenadas corregidas: {coordenadas_incorrectas}")
    
    if coordenadas_incorrectas > 0:
        # Guardar archivo corregido
        try:
            with open('static/data/metro_routes.json', 'w', encoding='utf-8') as f:
                json.dump(routes_data, f, indent=2, ensure_ascii=False)
            print("‚úÖ Archivo guardado con coordenadas corregidas")
        except Exception as e:
            print(f"‚ùå Error al guardar archivo: {e}")
    else:
        print("‚úÖ No se encontraron coordenadas que necesiten correcci√≥n")

if __name__ == "__main__":
    verificar_coordenadas_rutas() 